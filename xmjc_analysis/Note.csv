*******************************
四川省科技厅数据统计分析（决策）平台

系统环境：WIN10 64bit
开发环境：sublime+Anaconda
数据库：Mysql 5.6.17
语言：python3.5
框架：django1.11+Bootstrap
可视化工具：Highchart|Echarts|plotly|Bokeh
用户名|密码：xmjc | 密码：xmjc123456
********************************

————————————————————————————————————————————————————————
一、Django配置及前端设计
————————————————————————————————————————————————————————
1   创建项目,项目决策分析：xmjc_analysis
    django-admin startproject xmjc_analysis
    创建App，可视化展示：charts
    django-admin startapp charts

2   配置mysql数据库
    settings.py：
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'test',
            'USER': 'test',
            'PASSWORD': 'test123',
            'HOST':'localhost',
            'PORT':'3306',
        }
    }

    __init__.py:
    import pymysql
    pymysql.install_as_MySQLdb()

    在model中设计数据库
    class Entry(models.Model):
    blog = models.ForeignKey(Blog)
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField()
    authors = models.ManyToManyField(Author)
    n_comments = models.IntegerField()
    n_pingbacks = models.IntegerField()
    rating = models.IntegerField()
    def __str__(self):
        return self.headline
    在admin中显示数据

    创建更改的文件,将生成的py文件应用到数据库
    python manage.py makemigrations
    python manage.py migrate

    创建超级管理员：用户名，xmjc；密码密码：xmjc123456
    python manage.py createsuperuser

3   运行服务器
    python manage.py runserver

4   数据库常用操作
    # 方法 1
    Author.objects.create(name="WeizhongTu", email="tuweizhong@163.com")
    # 方法 2
    twz = Author(name="WeizhongTu", email="tuweizhong@163.com")
    twz.save()
    获取对象：
    Person.objects.all()
    满足条件查询
    Person.objects.filter(name="abc")
    迭代查询：
    es = Entry.objects.all()
    for e in es:
        print(e.headline)
    查询排序：
    Author.objects.all().order_by('name')
    链式查询：
    Author.objects.filter(name__contains="WeizhongTu").filter(email="tuweizhong@163.com")
    去重查询：
    qs = qs.distinct()
    删除操作：
    Person.objects.all().delete()
    更新操作：
    ① Person.objects.filter(name__contains="abc").update(name='xxx')

5    数据库的导入导出
    数据的导出：
    python manage.py dumpdata [appname] > appname_data.json
    python manage.py dumpdata blog > blog_dump.json
    数据导入
    python manage.py loaddata blog_dump.json
    def main():
        from blog.models import Blog
        f = open('oldblog.txt')
        BlogList = []
        for line in f:
            title,content = line.split('****')
            blog = Blog(title=title,content=content)
            BlogList.append(blog)
        f.close()
        Blog.objects.bulk_create(BlogList)
    导出用户数据
    python manage.py dumpdata auth > auth.json # 导出用户数据
    Django 项目环境终端
    python manage.py shell
    数据库命令行
    python manage.py dbshell

6   Python/Django 生成二维码
    1 pip install qrcode
      pip install Image
    2 import qrcode
      img = qrcode.make('http://www.cnblogs.com/baiboy/')
      with open('test.png', 'wb') as f:
          img.save(f)

7   相关操作
    1 实现管理后台中文显示效果
    LANGUAGE_CODE = 'zh-Hans' # 中文显示
    2 静态static文件夹的配置
    setting：
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, "static")
    url：
    # 配置加载静态页面
    from django.conf import settings
    from django.conf.urls.static import static
    urlpatterns = [
        url(r'^admin/', admin.site.urls),
        # 首页
        url(r'^index/$', analysis_views.index,name='index'),

    ] + static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
    3 base页面开头添加
    {% load static %}
    4 超链接
    href="{% url 'index' %}

———————————————————————————————————————————————————————————
二、数据可视化展示
———————————————————————————————————————————————————————————
1   Echarts工具测试

2   Highchart工具测试

3   plotly工具测试

4   Bokeh工具测试




———————————————————————————————————————————————————————————
二、数据分析算法
———————————————————————————————————————————————————————————